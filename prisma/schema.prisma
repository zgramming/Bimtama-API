generator client {
  provider = "prisma-client-js"
  // output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  inactive
  blocked
  process_verification
}

enum CommonStatus {
  active
  inactive
}

enum GuidanceDetailStatus {
  rejected
  progress
  approved
}

enum MeetingScheduleType {
  personal
  group
}

enum MeetingScheduleMethod {
  luring
  daring
}

model AppGroupUser {
  id     Int          @id @default(autoincrement())
  code   String       @unique @db.VarChar(50)
  name   String       @db.VarChar(100)
  status CommonStatus @default(active)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user         Users[]
  access_modul AppAccessModul[]
  access_menu  AppAccessMenu[]

  @@map("app_group_user")
}

model AppAccessMenu {
  id                String @id @default(uuid())
  app_group_user_id Int
  app_modul_id      Int
  app_menu_id       Int
  allowed_access    Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_group_user AppGroupUser @relation(fields: [app_group_user_id], references: [id], onDelete: Cascade)
  app_modul      AppModul     @relation(fields: [app_modul_id], references: [id], onDelete: Cascade)
  app_menu       AppMenu      @relation(fields: [app_menu_id], references: [id], onDelete: Cascade)

  @@map("app_access_menu")
}

model AppMenu {
  id                 Int          @id @default(autoincrement())
  app_modul_id       Int
  app_menu_id_parent Int?
  code               String       @db.VarChar(50)
  name               String       @db.VarChar(100)
  route              String       @db.VarChar(100)
  order              Int          @default(0)
  icon               String?
  status             CommonStatus @default(active)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_modul      AppModul        @relation(fields: [app_modul_id], references: [id], onDelete: Cascade)
  menu_parent    AppMenu?        @relation(name: "parent_children", fields: [app_menu_id_parent], references: [id], onDelete: Cascade)
  menu_childrens AppMenu[]       @relation(name: "parent_children")
  access_menu    AppAccessMenu[]

  @@map("app_menu")
}

model AppAccessModul {
  id                String @id @default(uuid())
  app_group_user_id Int
  app_modul_id      Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_group_user AppGroupUser @relation(fields: [app_group_user_id], references: [id], onDelete: Cascade)
  app_modul      AppModul     @relation(fields: [app_modul_id], references: [id], onDelete: Cascade)

  @@map("app_access_modul")
}

model AppModul {
  id      Int          @id @default(autoincrement())
  code    String       @unique @db.VarChar(50)
  name    String       @db.VarChar(100)
  order   Int          @default(0) @db.Int
  pattern String       @unique @db.VarChar(255)
  icon    String?      @db.VarChar(100)
  status  CommonStatus @default(active)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  menus        AppMenu[]
  access_modul AppAccessModul[]
  access_menu  AppAccessMenu[]

  @@map("app_modul")
}

model Documentation {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  code        String       @unique @db.VarChar(50)
  job_id      Int
  birth_date  DateTime
  money       Decimal      @db.Decimal(19, 4)
  hobbies     Json
  description String?      @db.Text()
  status      CommonStatus @default(active)
  image       String?      @db.Text
  file        String?      @db.Text
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  created_by  Int?
  updated_by  Int?

  job MasterData @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@map("documentation")
}

model MasterCategory {
  id                 Int          @id @default(autoincrement())
  master_category_id Int?
  code               String       @unique @db.VarChar(50)
  name               String       @db.VarChar(100)
  description        String?      @db.Text
  status             CommonStatus @default(active)

  /// Template
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  /// Relationship
  master_category_parent   MasterCategory?  @relation(name: "category", fields: [master_category_id], references: [id], onDelete: Cascade)
  master_category_children MasterCategory[] @relation(name: "category")
  master_datas             MasterData[]

  @@map("master_category")
}

model MasterData {
  id                   Int          @id @default(autoincrement())
  master_data_id       Int?
  master_category_id   Int
  master_category_code String       @db.VarChar(50)
  code                 String       @unique @db.VarChar(50)
  name                 String       @db.VarChar(100)
  order                Int          @default(0)
  description          String?      @db.Text
  status               CommonStatus @default(active)
  parameter1_key       String?      @db.VarChar(50)
  parameter1_value     String?      @db.VarChar(50)
  parameter2_key       String?      @db.VarChar(50)
  parameter2_value     String?      @db.VarChar(50)
  parameter3_key       String?      @db.VarChar(50)
  parameter3_value     String?      @db.VarChar(50)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  master_category      MasterCategory  @relation(fields: [master_category_id], references: [id], onDelete: Cascade)
  master_data_parent   MasterData?     @relation(name: "master_data", fields: [master_data_id], references: [id], onDelete: Cascade)
  master_data_children MasterData[]    @relation(name: "master_data")
  jobs_documentation   Documentation[]

  outline                   Outline[]
  outline_component         OutlineComponent[]
  guidance                  Guidance[]
  guidance_detail           GuidanceDetail[]
  student_guidance_progress StudentGuidanceProgress[]

  @@map("master_data")
}

model Parameter {
  id     Int          @id @default(autoincrement())
  name   String       @db.VarChar(100)
  code   String       @unique @db.VarChar(50)
  value  String       @db.Text
  status CommonStatus @default(active)

  /// Template
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  @@map("parameter")
}

model Users {
  id                Int        @id @default(autoincrement())
  app_group_user_id Int
  name              String?    @db.VarChar(100)
  email             String     @unique @db.VarChar(100)
  username          String     @unique @db.VarChar(50)
  password          String     @db.Text
  status            UserStatus @default(inactive)
  phone             String?    @db.VarChar(15)
  image             String?    @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_group_user            AppGroupUser              @relation(fields: [app_group_user_id], references: [id], onDelete: Cascade)
  student_outline           StudentOutline?
  group_member              GroupMember[]
  group                     Group[]
  lecture_group_active      LectureGroupActive?
  guidance                  Guidance?
  guidance_detail           GuidanceDetail[]
  student_guidance_progress StudentGuidanceProgress[]
  meeting_schedule_personal MeetingSchedulePersonal[]

  @@map("users")
}

//! Application

model Group {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  code        String  @unique @db.VarChar(50)
  description String? @db.Text()
  image       String? @db.Text()

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  /// Lecture ID Who Create this group
  created_by Int
  updated_by Int?

  group_member         GroupMember[]
  user                 Users               @relation(fields: [created_by], references: [id], onDelete: Cascade)
  lecture_group_active LectureGroupActive?
  meeting_schedule     MeetingSchedule[]
  guidance             Guidance[]
  guidance_detail      GuidanceDetail[]

  @@map("group")
}

model GroupMember {
  id        String  @id @default(uuid())
  group_id  Int
  user_id   Int
  is_admin  Boolean @default(true)
  is_active Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user  Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  /// User cant be join same group with duplicate [group_id && user_id]
  @@unique([group_id, user_id])
  @@map("group_member")
}

model Guidance {
  id                                       Int     @id @default(autoincrement())
  user_id                                  Int     @unique
  group_id                                 Int
  current_progres_mst_outline_component_id Int
  title                                    String
  description                              String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user  Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)

  mst_outline_component MasterData       @relation(fields: [current_progres_mst_outline_component_id], references: [id], onDelete: Cascade)
  guidance_detail       GuidanceDetail[]

  @@map("guidance")
}

model GuidanceDetail {
  id                       String               @id @default(uuid())
  guidance_id              Int
  user_id                  Int
  group_id                 Int
  mst_outline_component_id Int
  title                    String
  description              String?              @db.Text()
  lecture_note             String?              @db.Text()
  status                   GuidanceDetailStatus @default(progress)
  file                     String?              @db.Text()

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  guidance              Guidance   @relation(fields: [guidance_id], references: [id], onDelete: Cascade)
  user                  Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group                 Group      @relation(fields: [group_id], references: [id], onDelete: Cascade)
  mst_outline_component MasterData @relation(fields: [mst_outline_component_id], references: [id], onDelete: Cascade)

  @@map("guidance_detail")
}

model LectureGroupActive {
  id       Int @id @default(autoincrement())
  user_id  Int @unique
  group_id Int @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user  Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("lecture_group_active")
}

model MeetingSchedule {
  id           Int                   @id @default(autoincrement())
  group_id     Int
  title        String                @db.VarChar(100)
  description  String                @db.Text()
  type         MeetingScheduleType   @default(group)
  method       MeetingScheduleMethod @default(luring)
  link_maps    String?               @db.Text()
  link_meeting String?               @db.Text()
  start_date   DateTime
  end_date     DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  group                     Group                    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  meeting_schedule_personal MeetingSchedulePersonal?

  @@map("meeting_schedule")
}

model MeetingSchedulePersonal {
  id                  String @id @default(uuid())
  meeting_schedule_id Int    @unique
  group_id            Int
  user_id             Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  meeting_schedule MeetingSchedule @relation(fields: [meeting_schedule_id], references: [id], onDelete: Cascade)
  user             Users           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("meeting_schedule_personal")
}

model Outline {
  id             Int      @id @default(autoincrement())
  mst_outline_id Int
  title          String   @db.VarChar(100)
  description    String?  @db.Text
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  created_by     Int?
  updated_by     Int?

  master_outline    MasterData         @relation(fields: [mst_outline_id], references: [id], onDelete: Cascade)
  outline_component OutlineComponent[]
  student_outline   StudentOutline[]

  @@map("outline")
}

model OutlineComponent {
  id                       String   @id @default(uuid())
  outline_id               Int
  mst_outline_component_id Int
  title                    String   @db.VarChar(100)
  description              String?  @db.Text()
  order                    Int
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  created_by               Int?
  updated_by               Int?

  outline                  Outline    @relation(fields: [outline_id], references: [id], onDelete: Cascade)
  master_outline_component MasterData @relation(fields: [mst_outline_component_id], references: [id], onDelete: Cascade)

  @@map("outline_component")
}

model StudentGuidanceProgress {
  id                       Int @id @default(autoincrement())
  user_id                  Int
  mst_outline_component_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user                  Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  mst_outline_component MasterData @relation(fields: [mst_outline_component_id], references: [id], onDelete: Cascade)

  @@map("student_guidance_progress")
}

model StudentOutline {
  id      Int @id @default(autoincrement())
  /// One to One
  user_id Int @unique

  outline_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user    Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  outline Outline @relation(fields: [outline_id], references: [id], onDelete: Cascade)

  @@map("student_outline")
}
